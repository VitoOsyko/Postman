{
	"info": {
		"_postman_id": "c166edee-0c8b-49d9-9bf0-e8123d901960",
		"name": "HW_Group_31",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21576098"
	},
	"item": [
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json\r",
							"let parsing_response = pm.response.json()\r",
							"console.log (\"парсинг респонса\", parsing_response)\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"console.log(\"name fron response\", parsing_response.name)\r",
							"pm.test('imya vbitoe rukami',()=> {\r",
							"    pm.expect(parsing_response.name).to.eql(\"Vito\")\r",
							"    })\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"//Способ 1\r",
							"pm.test(\"age from response\",function(){\r",
							"    pm.expect(+parsing_response.age).to.eql(26)\r",
							"})\r",
							"//Способ 2\r",
							"pm.test(\"age from response\",function(){\r",
							"    pm.expect(Number(parsing_response.age)).to.eql(26)\r",
							"})\r",
							"//Способ 3\r",
							"pm.test(\"age from response\",function(){\r",
							"    pm.expect(parsing_response.age).to.eql('26')\r",
							"})\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary rukami\",function(){\r",
							"    pm.expect(parsing_response.salary).to.eql(1000)\r",
							"})\r",
							"//7. Спарсить request\r",
							"let parsing_request = request.data\r",
							"console.log('парсинг (сбор данных заданному условию) реквеста',parsing_request)\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('name from request', function(){\r",
							"    pm.expect(parsing_response.name).to.equal(parsing_request.name)\r",
							"    })\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('age from request', function(){\r",
							"    pm.expect(parsing_response.age).to.equal(parsing_request.age)\r",
							"    })\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('salary from request',function(){\r",
							"    pm.expect(parsing_response.salary).to.eql(+parsing_request.salary)\r",
							"})\r",
							"//11. Вывести в консоль параметр family из response\r",
							"console.log('parametr',parsing_response.family)\r",
							"console.log('вывожу',parsing_response.family.u_salaru_1_5_years)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('ЗП из реквеста',function(){\r",
							"    pm.expect(parsing_response.family.u_salary_1_5_year).to.eql(parsing_request.salary*4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vito",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log(jsonData)\r",
							"//4. Спарсить request\r",
							"let jsonReq = pm.request.url.query.all()\r",
							"console.log(jsonReq,\"Реквест\")\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"masiveName\",function(){\r",
							"    pm.expect(jsonData.age).to.eql(jsonReq[0].value)\r",
							"    })\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"masiveAge\",function(){\r",
							"    pm.expect(jsonData.name).to.eql(jsonReq[1].value)\r",
							"    })\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"masiveSalary\",function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+jsonReq[2].value)\r",
							"    })\r",
							"//8. Вывести в консоль параметр family из response\r",
							"console.log(\"family\",jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name\r",
							"console.log(\"Sobaka\",jsonData.family.pets.dog)\r",
							"pm.test(\"nameSobaka\",function()\r",
							"{pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"//10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"ageSobaka\",function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"    })\r",
							"//11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"imyaSobaki\",function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"    })\r",
							"//12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"godikiSobaki\",function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"    })"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Vito",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?age=26&name=Vito&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "name",
							"value": "Vito"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log(jsonData)\r",
							"//4. Спарсить request.\r",
							"let jsonReq = pm.request.url.query.toObject()\r",
							"console.log(jsonReq,\"Реквест\")\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"masiveName\",function(){\r",
							"    pm.expect(jsonData.name).to.eql(jsonReq.name)\r",
							"    })\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"masiveAge\",function(){\r",
							"    pm.expect(jsonData.age).to.eql(+jsonReq.age)\r",
							"    })\r",
							"//7. Вывести в консоль параметр salary из request\r",
							"console.log(\"salary\",jsonReq.salary)\r",
							"//8. Вывести в консоль параметр salary из response\r",
							"console.log(\"salaryResp\",jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"Тысяча\",jsonData.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Две тысячи\",jsonData.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Три тысячи\",jsonData.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"nullRaven\",function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+jsonReq.salary)\r",
							"})\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary равен salary*2\",function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(jsonReq.salary*2)\r",
							"})\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary равен salary*3\",function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(jsonReq.salary*3)\r",
							"})\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"Робит чи не\")\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",jsonData.name)\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",jsonData.age)\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",jsonData.salary[0])\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for(let a =0; a < jsonData.salary.length; a++){\r",
							"    console.log('massive ',jsonData.salary[a]);\r",
							"};\r",
							"//способ 2\r",
							"jsonData.salary.forEach(el =>{\r",
							"    console.log(el);\r",
							"});\r",
							"//22 создам массивы\r",
							"let array = [1,2,3];\r",
							"console.log(array);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Vito&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vito"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"let Salary = pm.environment.get('salary')\r",
							"//2. Вставить параметр age из окружения в age\r",
							"let age = pm.environment.get('age')\r",
							"//3. Вставить параметр name из окружения в name\r",
							"let name = pm.environment.get('name')\r",
							"//4. Отправить запрос.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//5. Статус код 200\r",
							"//6. Спарсить response body в json\r",
							"let response = pm.response.json()\r",
							"console.log(response)\r",
							"//7. Спарсить request.\r",
							"let jsonRequest = request.data\r",
							"console.log(jsonRequest)\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('json response имеет параметр start_qa_salary',function(){\r",
							"    pm.expect(response).to.have.property('start_qa_salary');\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('json response имеет параметр qa_salary_after_6_months',function(){\r",
							"    pm.expect(response).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('json response имеет параметр qa_salary_after_12_months',function(){\r",
							"    pm.expect(response).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('json response имеет параметр qa_salary_after_1.5_year',function(){\r",
							"    pm.expect(response).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('json response имеет параметр qa_salary_after_3.5_years',function(){\r",
							"    pm.expect(response).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test('json response имеет параметр person',function(){\r",
							"    pm.expect(response).to.have.property('person');\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('параметр start_qa_salary равен salary из request',function(){\r",
							"    pm.expect(response.start_qa_salary).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('параметр qa_salary_after_6_months равен salary*2',function(){\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(+jsonRequest.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_12_months равен salary*2.7',function(){\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(+jsonRequest.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_1.5_years равен salary*3.3',function(){\r",
							"    pm.expect(response['qa_salary_after_1.5_year']).to.eql(+jsonRequest.salary*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_3.5_years равен salary*3.8',function(){\r",
							"    pm.expect(response['qa_salary_after_3.5_years']).to.eql(+jsonRequest.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('параметре person, 1-й элемент из u_name равен salary',function(){\r",
							"    pm.expect(response.person.u_name[1]).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('параметр u_age равен age из request',function(){\r",
							"    pm.expect(response.person.u_age).to.eql(+jsonRequest.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('параметр u_salary_5_years равен salary*4.2',function(){\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(+jsonRequest.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for(let a in response.person){\r",
							"    console.log (a+':'+response.person[a]);\r",
							"};\r",
							"\r",
							"for(let a in response){\r",
							"    console.log (a+': '+response[a]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vito",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}