{
	"info": {
		"_postman_id": "c49c45f6-3d4d-4ccd-9b85-a0b24ca4f052",
		"name": "LIIS_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21576098"
	},
	"item": [
		{
			"name": "LIIS Test v.1",
			"item": [
				{
					"name": "Posts",
					"item": [
						{
							"name": "Normal sign-in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/* \r",
											"let timestamp = new Date().getTime();\r",
											"pm.test_api.set(\"generatedUsername\", \"user\" + timestamp);\r",
											"pm.test_api.set(\"generatedEmail\", \"user\" + timestamp + \"@example.com\");\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length username 79",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 79 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length username 80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 80 символов!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length username 81",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.username).to.eql([\"Longer than maximum length 80.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 119",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 121",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.email).to.eql([\"Longer than maximum length 120.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Re-registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User with this username or email already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito456\",\n    \"email\": \"Vito640@gmail.com\",\n    \"password\": \"123B\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql([\"Missing data for required field.\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"password\": \"123C\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.message).to.eql([\"Username field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"                                              \",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": null,\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in number value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422); // Я бы ожидал 400... Спорно, не могу сказать как было бы правильнее и есть ли тут баг.\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql(['Not a valid string.']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": 14,\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value password v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Email field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito_QA33435\",\n    \"email\": \"                                    \",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in all empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Email field cannot be empty\"]);\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.message).to.eql([\"Username field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"username\": \"         \",\n    \"email\": \"          \",\n    \"password\": \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Empty JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in number value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422); // Я бы ожидал 400... Спорно, не могу сказать как было бы правильнее и есть ли тут баг.\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql(['Not a valid string.']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito_QA345\",\n    \"email\": 12345,\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito_QA345\",\n    \"email\": null,\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Incorrect username or Email\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"@00@0\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.name).to.eql([\"Incorrect username or Name\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"$^&^%^*$%@@__-33-Тест\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"1234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Incorrect username or Password\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"_-_\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Post post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"Это название тестового поста\",\r",
											"        \"content\": \"А это его текст\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"            pm.test(\"Валидация поля выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Not a valid string.\")});\r",
											"        } \r",
											"else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) \r",
											"    { \r",
											"            pm.test(\"Валидация NULL выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Field may not be null.\")})\r",
											"        };\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})        "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста\",\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста с пустым названием\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название поста.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"   \",\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста\",\n    \"content\": \"   \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post incorrect value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Некорректные значения в полях\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"@#@#!@$$@#%@%@%@#\",\n    \"content\": \"%#$%#$%#$%#$^#^#$^\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty content and title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название поста.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"content\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без названия\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста c пустым значением\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании с пустым значением\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста\",\n    \"content\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post too large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\");  \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 180.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬ\",\n    \"content\": \"А это его текст. ООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬ много\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id3\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\r",
											"        \"content\": \"А это его текст.\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"            pm.test(\"Валидация поля выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Not a valid string.\")});\r",
											"        } \r",
											"else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) \r",
											"    { \r",
											"            pm.test(\"Валидация NULL выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Field may not be null.\")})\r",
											"        };\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"// Проверка, что в ответе есть внесенные нами данные\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\r",
											"        \"content\": \"А это его текст.\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"            pm.test(\"Валидация поля выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Not a valid string.\")});\r",
											"        } \r",
											"else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) \r",
											"    { \r",
											"            pm.test(\"Валидация NULL выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Field may not be null.\")})\r",
											"        };\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})        "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 181 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 180.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 181 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 179 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"// Проверка, что в ответе есть внесенные нами данные\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"Это название тестового поста.\",\r",
											"        \"content\": \"Здесь 179 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"            pm.test(\"Валидация поля выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Not a valid string.\")});\r",
											"        } \r",
											"else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) \r",
											"    { \r",
											"            pm.test(\"Валидация NULL выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Field may not be null.\")})\r",
											"        };\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})        "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 179 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 180 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id5\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"// Проверка, что в ответе есть внесенные нами данные\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"Это название тестового поста.\",\r",
											"        \"content\": \"Здесь 180 символ! Не считая пробелы! Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле publication_datetime не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\"); \r",
											"    pm.expect(jsonData.publication_datetime).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"title\"); \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"            pm.test(\"Валидация поля выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Not a valid string.\")});\r",
											"        } \r",
											"else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) \r",
											"    { \r",
											"            pm.test(\"Валидация NULL выполнена\", function () {\r",
											"                pm.expect(pm.response.text()).to.include(\"Field may not be null.\")})\r",
											"        };\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})        "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 180 символ! Не считая пробелы! Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty JSON2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Json have property author, content, id, publication_datetime, titles\", function(){\r",
											"    jsonData.forEach(element => {\r",
											"        pm.expect(element).to.have.property(\"author\");\r",
											"        pm.expect(element).to.have.property(\"content\");\r",
											"        pm.expect(element).to.have.property(\"id\");\r",
											"        pm.expect(element).to.have.property(\"publication_datetime\");\r",
											"        pm.expect(element).to.have.property(\"title\");\r",
											"        });      \r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Это массив))\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"JSON has author, content, id, publication_datetime, titles properties\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not null\", function () {\r",
											"    pm.expect(jsonData.author).to.not.be.null;\r",
											"    pm.expect(jsonData.content).to.not.be.null;\r",
											"    pm.expect(jsonData.id).to.not.be.null;\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.null;\r",
											"    pm.expect(jsonData.title).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not empty\", function () {\r",
											"    pm.expect(jsonData.author + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.content).to.not.be.empty;\r",
											"    pm.expect(jsonData.id + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.empty;\r",
											"    pm.expect(jsonData.title).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains POST data\", function() {\r",
											"    const expectedObject = {\r",
											"        \"author\": 3,\r",
											"        \"content\": \"А тут мы сменили контент поста\",\r",
											"        \"id\": 5502,\r",
											"        \"publication_datetime\": \"2023-02-11T19:57:33.304638\",\r",
											"        \"title\": \"Это изменнёный тайтл\"\r",
											"    };\r",
											"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/54353",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"54353"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Запрос отправлен с правильными данными\", function () {\r",
											"    const requestData = {\r",
											"        \"title\": \"Это изменённый тайтл\",\r",
											"        \"content\": \"А тут мы сменили контент поста\"\r",
											"    };\r",
											"    pm.expect(JSON.parse(pm.request.body)).to.eql(requestData);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это изменённый тайтл\",\n    \"content\": \"А тут мы сменили контент поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post non title or content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"При попытке изменить поле title и content на пустую строку, сервер вернет ошибку\", function () {\r",
											"    const requestData = {\r",
											"        \"title\": \"\",\r",
											"        \"content\": \"\"\r",
											"    };\r",
											"    pm.sendRequest({\r",
											"        url: \"https://hr.recruit.liis.su/qa0/v1/api/vitalyasroma@gmail/post/1234.com\",\r",
											"        method: \"PUT\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify(requestData)\r",
											"        }\r",
											"    }, pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"content\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post content NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это изменнёный тайтл\",\n    \"content\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post title NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"content\": \"А тут мы сменили контент поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post title or content is number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ содержит ошибки при отправке чисел вместо строк\", function () {\r",
											"    const requestBody = {\r",
											"        \"title\": 231231,\r",
											"        \"content\": 1111\r",
											"    };\r",
											"    pm.request.body = JSON.stringify(requestBody);\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(422);\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"        \"title\": [\r",
											"            \"Not a valid string.\"\r",
											"        ],\r",
											"        \"content\": [\r",
											"            \"Not a valid string.\"\r",
											"        ]\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 231231,\n    \"content\": 1111\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post only content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"А тут мы сменили контент поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post only title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это изменнёный тайтл2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post ----",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Отсутствует ресурс для изменения\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.text()).to.include(\"Post not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это изменнёный тайтл2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/554543534",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"554543534"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получен статус 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ пустой\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReDelete post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/{{post_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"{{post_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post random ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/post/545345345",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"post",
										"545345345"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Post comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_id\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"content\": json_req.content,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": \"yourcommenttext\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": \"\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста с пустым названием\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название комментария.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"content\": \"fsdfsdfsdf\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty title and content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название комментария.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"content\": \"\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без названия\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"yourcommenttitle\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": null,\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста c пустым значением\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании с пустым значением\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"content\": \"yourcommenttext\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment too large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\");  \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 80.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\n    \"content\": \"yourcommenttextyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id2\", jsonData.post);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"content\": json_req.content,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"content\": \"yourcommenttext\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id2\", jsonData.post);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"content\": json_req.content,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"content\": \"yourcommenttext\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"});    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"content\": \"yourcommenttext\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id2\", jsonData.post);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"content\": json_req.content,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 80.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id2\", jsonData.post);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"content\": json_req.content,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"content\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"post\": {{post_id2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Json have property author, content, id, publication_datetime, titles\", function(){\r",
											"    jsonData.forEach(element => {\r",
											"        pm.expect(element).to.have.property(\"author\");\r",
											"        pm.expect(element).to.have.property(\"content\");\r",
											"        pm.expect(element).to.have.property(\"id\");\r",
											"        pm.expect(element).to.have.property(\"publication_datetime\");\r",
											"        pm.expect(element).to.have.property(\"title\");\r",
											"        });      \r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Это массив))\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"JSON has author, content, id, publication_datetime, titles properties\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not null\", function () {\r",
											"    pm.expect(jsonData.author).to.not.be.null;\r",
											"    pm.expect(jsonData.content).to.not.be.null;\r",
											"    pm.expect(jsonData.id).to.not.be.null;\r",
											"    pm.expect(jsonData.post).to.not.be.null;\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.null;\r",
											"    pm.expect(jsonData.title).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not empty\", function () {\r",
											"    pm.expect(jsonData.author + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.content).to.not.be.empty;\r",
											"    pm.expect(jsonData.id + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.empty;\r",
											"    pm.expect(jsonData.title).to.not.be.empty;\r",
											"    pm.expect(jsonData.post + \"\").to.not.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains POST data\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": \"yourcommenttitle\",\r",
											"        \"content\": \"yourcommenttext\",\r",
											"        \"author\": 2491,\r",
											"        \"publication_datetime\": \"2023-02-18T13:04:02.852234\",\r",
											"        \"id\": 1268,\r",
											"        \"post\": 5479\r",
											"    };\r",
											"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/12685435345",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"12685435345"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Изменим тут\",\n    \"content\": \"И немного вот тут\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment non title or content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourdsadsadsafname\",\n    \"content\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put title or content is number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ содержит ошибки при отправке чисел вместо строк\", function () {\r",
											"    const requestBody = {\r",
											"        \"title\": 231231,\r",
											"        \"content\": 1111\r",
											"    };\r",
											"    pm.request.body = JSON.stringify(requestBody);\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(422);\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"        \"title\": [\r",
											"            \"Not a valid string.\"\r",
											"        ],\r",
											"        \"content\": [\r",
											"            \"Not a valid string.\"\r",
											"        ]\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 32323,\n    \"content\": 123232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put only content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"И всё\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put only title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"А сообщение забыл\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put -----",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Отсутствует ресурс для изменения\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.text()).to.include(\"Comment not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Изменим тут\",\r\n    \"content\": \"И немного вот тут\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/1268432423423",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"1268432423423"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получен статус 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ пустой\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/{{comment_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"{{comment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/{{comment_id}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"{{comment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito621",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v1/api/{{email}}/comment/123123443",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v1",
										"api",
										"{{email}}",
										"comment",
										"123123443"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LIIS Test v.2",
			"item": [
				{
					"name": "Posts",
					"item": [
						{
							"name": "sign-in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"        pm.expect(jsonData.is_admin).to.be.a('boolean');\r",
											"        pm.expect(jsonData.first_name).to.be.a('string');\r",
											"        pm.expect(jsonData.middle_name).to.be.a('string');\r",
											"        pm.expect(jsonData.last_name).to.be.a('string');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"        pm.expect(jsonData).to.have.property(\"is_admin\");\r",
											"        pm.expect(jsonData).to.have.property(\"first_name\");\r",
											"        pm.expect(jsonData).to.have.property(\"middle_name\");\r",
											"        pm.expect(jsonData).to.have.property(\"last_name\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password.\nOptional fields: first_name, middle_name, last_name."
							},
							"response": []
						},
						{
							"name": "Sign-in length username 79",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 79 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length username 80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 80 символов!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length username 81",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.username).to.eql([\"Longer than maximum length 80.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 119",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 120",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"user_id2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 201) {\r",
											"\r",
											"   pm.test(\"Типы данных полей\", function() {\r",
											"        pm.expect(jsonData.username).to.be.a('string');\r",
											"        pm.expect(jsonData.email).to.be.a('string');\r",
											"        pm.expect(jsonData.password).to.be.a('string');\r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Значения полей не пустые\", function () {\r",
											"        pm.expect(jsonData.username).to.not.eql(\"\");\r",
											"        pm.expect(jsonData.email).to.not.eql(\"\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"ID положительное число\", function () {\r",
											"        pm.expect(jsonData.id).to.be.above(0);\r",
											"    });\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"username\", \"password\", \"email\" ];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Все обязательные поля заполненны\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.username).to.be.a('string');\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData.password).to.be.a('string');\r",
											"    pm.expect(jsonData.id).to.be.a('number')\r",
											"})};\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"username\");\r",
											"        pm.expect(jsonData).to.have.property(\"email\");\r",
											"        pm.expect(jsonData).to.have.property(\"password\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"})\r",
											"\r",
											"    pm.test(\"Ответ содержит верные данные\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.username).to.equal(requestBody.username);\r",
											"        pm.expect(responseBody.email).to.equal(requestBody.email);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Пароль в ответе не равен паролю из запроса\", function () {\r",
											"        let requestBody = JSON.parse(pm.request.body.raw);\r",
											"        let responseBody = pm.response.json();\r",
											"\r",
											"        pm.expect(responseBody.password).to.not.equal(requestBody.password);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in length email 121",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.email).to.eql([\"Longer than maximum length 120.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Тут 81 символ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\",\n    \"email\": \"Vit1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111!!111@gmail.com\",\n    \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Re-registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.type).to.eql(\"error\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User with this username or email already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito456\",\n    \"email\": \"Vito640@gmail.com\",\n    \"password\": \"123B\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql([\"Missing data for required field.\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in without a email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.header(\"content-type\",\"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.message).to.eql([\"Username field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"                      \",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": null,\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in number value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422); // Я бы ожидал 400... Спорно, не могу сказать как было бы правильнее и есть ли тут баг.\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.username).to.eql(['Not a valid string.']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": 14,\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value password v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \" \",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": null,\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in empty value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Email field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"                                            \",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in all empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(400);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Email field cannot be empty\"]);\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Password field cannot be empty\"]);\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.message).to.eql([\"Username field cannot be empty\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"           \",\n    \"email\": \"            \",\n    \"password\": \"          \",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Empty JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in number value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422); // Я бы ожидал 400... Спорно, не могу сказать как было бы правильнее и есть ли тут баг.\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql(['Not a valid string.']);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": 43242345,\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in NULL value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": null,\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.email).to.eql([\"Incorrect username or Email\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"@@@@@@@@@@\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.name).to.eql([\"Incorrect username or Name\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"$^&^%^*$%@__-333-Тeст\",\n    \"email\": \"@@@@@@@@@@@\",\n    \"password\": \"123B\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Sign-in incorrect value password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											"\r",
											"pm.test(\"Возвращается сообщение об ошибке\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password).to.be.a(\"array\");\r",
											"    pm.expect(jsonData.password).to.eql([\"Incorrect username or Password\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Vito{{$randomInt}}\",\n    \"email\": \"Vito{{$randomInt}}@gmail.com\",\n    \"password\": \"-_-\",\n    \"first_name\": \"Vito\",\n    \"middle_name\": \"Andreevich\",\n    \"last_name\": \"Osyko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/sign-in",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"sign-in"
									]
								},
								"description": "Required fields: username, email, password"
							},
							"response": []
						},
						{
							"name": "Post post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_idv2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение name в response = значению name в request\", function() {\r",
											"    pm.expect(jsonData.name).to.eql(json_req.name);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"name\": \"Это название тестового поста\",\r",
											"        \"content\": \"А это его текст\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"    pm.test(\"Валидация поля выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Not a valid string.\")\r",
											"    });\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) { \r",
											"    pm.test(\"Валидация NULL выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Field may not be null.\")\r",
											"    });\r",
											"};\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста\",\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста с пустым названием\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название поста.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста\",\n    \"content\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post incorrect value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Некорректные значения в полях\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"@#@#!@$$@#%@%@%@#\",\n    \"content\": \"%#$%#$%#$%#$^#^#$^\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post empty content and name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql(\"Необходимо добавить контент.\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название поста.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"content\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без названия\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.name).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста c пустым значением\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании с пустым значением\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.name).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"content\": \"А это его текст\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.content).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста\",\n    \"content\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post too large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.name).to.eql([\"Longer than maximum length 80.\"])\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\");  \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 180.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста. И оно будет длинным. ООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬ\",\n    \"content\": \"А это его текст. ООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬЬ много\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_idv2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение name в response = значению name в request\", function() {\r",
											"    pm.expect(jsonData.name).to.eql(json_req.name);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"name\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\r",
											"        \"content\": \"А это его текст.\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"    pm.test(\"Валидация поля выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Not a valid string.\")\r",
											"    });\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) { \r",
											"    pm.test(\"Валидация NULL выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Field may not be null.\")\r",
											"    });\r",
											"};\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_idv2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение name в response = значению name в request\", function() {\r",
											"    pm.expect(jsonData.name).to.eql(json_req.name);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"name\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\r",
											"        \"content\": \"А это его текст.\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"    pm.test(\"Валидация поля выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Not a valid string.\")\r",
											"    });\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) { \r",
											"    pm.test(\"Валидация NULL выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Field may not be null.\")\r",
											"    });\r",
											"};\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4V2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.name).to.eql([\"Longer than maximum length 80.\"])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"content\": \"А это его текст.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 181 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData.content).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.content).to.eql([\"Longer than maximum length 180.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 181 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 179 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_idv2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение name в response = значению name в request\", function() {\r",
											"    pm.expect(jsonData.name).to.eql(json_req.name);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"name\": \"Это название тестового поста.\",\r",
											"        \"content\": \"Здесь 179 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"    pm.test(\"Валидация поля выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Not a valid string.\")\r",
											"    });\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) { \r",
											"    pm.test(\"Валидация NULL выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Field may not be null.\")\r",
											"    });\r",
											"};\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 179 символ! Не считая пробелы! Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 180 in content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_idv2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение name в response = значению name в request\", function() {\r",
											"    pm.expect(jsonData.name).to.eql(json_req.name);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"name\": \"Это название тестового поста.\",\r",
											"        \"content\": \"Здесь 180 символ! Не считая пробелы! Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\r",
											"};\r",
											"  pm.expect(jsonData).to.deep.include(expectedObject);\r",
											" });\r",
											"\r",
											"pm.test(\"Поле author не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле author не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"author\"); \r",
											"    pm.expect(jsonData.author).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле content не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле content не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"content\"); \r",
											"    pm.expect(jsonData.content).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле id не пустое\", function(){    \r",
											"    pm.expect(jsonData).to.have.property(\"id\"); \r",
											"    pm.expect(jsonData.id).not.eql(\"\");\r",
											"});\r",
											"\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Not a valid string.\" || jsonData.content ==\"Not a valid string.\")) { \r",
											"    pm.test(\"Валидация поля выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Not a valid string.\")\r",
											"    });\r",
											"} else if (pm.response.code === 422 && (jsonData.title == \"Field may not be null.\" || jsonData.content ==\"Field may not be null.\")) { \r",
											"    pm.test(\"Валидация NULL выполнена\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Field may not be null.\")\r",
											"    });\r",
											"};\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это название тестового поста.\",\n    \"content\": \"Здесь 180 символ! Не считая пробелы! Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty JSON2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение пагинации постов - успешный ответ\", function () {\r",
											"    pm.sendRequest(\"https://hr.recruit.liis.su/qa0/v2/api/vitalyasroma@gmail.com/posts?page=1\", function (err, res) {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts?page=1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts pagination limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Пытался, но не вышло(("
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts?page=1&limit=10",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts page 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка отсутствия второй страницы\", function () {\r",
											"    pm.sendRequest({\r",
											"        url: \"https://hr.recruit.liis.su/qa0/v2/api/vitalyasroma@gmail.com/posts?page=2\",\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        pm.expect(err).to.be.null;\r",
											"        pm.expect(res).to.have.status(200); //Хотя можно и 404\r",
											"        pm.expect('data' in res.json()).to.be.false;\r",
											"        pm.expect(res.json()).to.be.empty;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts?page=2",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"JSON has author, content, id, publication_datetime, titles properties\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not null\", function () {\r",
											"    pm.expect(jsonData.author).to.not.be.null;\r",
											"    pm.expect(jsonData.content).to.not.be.null;\r",
											"    pm.expect(jsonData.id).to.not.be.null;\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.null;\r",
											"    pm.expect(jsonData.name).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not empty\", function () {\r",
											"    pm.expect(jsonData.author + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.content).to.not.be.empty;\r",
											"    pm.expect(jsonData.id + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.empty;\r",
											"    pm.expect(jsonData.name).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains POST data\", function() {\r",
											"    const expectedObject = {\r",
											"        \"author\": 124,\r",
											"        \"content\": \"Здесь 180 символ! Не считая пробелы! Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа\",\r",
											"        \"id\": 3458,\r",
											"        \"publication_datetime\": \"2023-02-19T13:40:42.768337\",\r",
											"        \"name\": \"Это название тестового поста.\"\r",
											"    };\r",
											"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post V1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"JSON has author, content, id, publication_datetime, titles properties\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not null\", function () {\r",
											"    pm.expect(jsonData.author).to.not.be.null;\r",
											"    pm.expect(jsonData.content).to.not.be.null;\r",
											"    pm.expect(jsonData.id).to.not.be.null;\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.null;\r",
											"    pm.expect(jsonData.name).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not empty\", function () {\r",
											"    pm.expect(jsonData.author + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.content).to.not.be.empty;\r",
											"    pm.expect(jsonData.id + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.empty;\r",
											"    pm.expect(jsonData.name).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains POST data\", function() {\r",
											"    const expectedObject = {\r",
											"        \"author\": 3,\r",
											"        \"content\": \"А тут мы сменили контент поста\",\r",
											"        \"id\": 5502,\r",
											"        \"publication_datetime\": \"2023-02-11T19:57:33.304638\",\r",
											"        \"title\": \"Это изменнёный тайтл\"\r",
											"    };\r",
											"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/5506",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"5506"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/5345345534",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"5345345534"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Json have property author, content, id, publication_datetime, titles\", function(){\r",
											"    jsonData.forEach(element => {\r",
											"        pm.expect(element).to.have.property(\"author\");\r",
											"        pm.expect(element).to.have.property(\"content\");\r",
											"        pm.expect(element).to.have.property(\"id\");\r",
											"        pm.expect(element).to.have.property(\"publication_datetime\");\r",
											"        pm.expect(element).to.have.property(\"name\");\r",
											"        });      \r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Это массив))\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/posts",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Запрос отправлен с правильными данными\", function () {\r",
											"    const requestData = {\r",
											"        \"name\": \"Изменения тут\",\r",
											"        \"content\": \"yournewpostcontent\"\r",
											"    };\r",
											"    pm.expect(JSON.parse(pm.request.body)).to.eql(requestData);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Изменения тут\",\n    \"content\": \"yournewpostcontent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post V1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Запрос отправлен с правильными данными\", function () {\r",
											"    const requestData = {\r",
											"        \"name\": \"Изменения тут\",\r",
											"        \"content\": \"yournewpostcontent\"\r",
											"    };\r",
											"    pm.expect(JSON.parse(pm.request.body)).to.eql(requestData);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Изменения тут\",\n    \"content\": \"yournewpostcontent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/5506",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"5506"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post non name or content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"При попытке изменить поле title и content на пустую строку, сервер вернет ошибку\", function () {\r",
											"    const requestData = {\r",
											"        \"name\": \"\",\r",
											"        \"content\": \"\"\r",
											"    };\r",
											"    pm.sendRequest({\r",
											"        url: \"https://hr.recruit.liis.su/qa0/v1/api/vitalyasroma@gmail/post/1234.com\",\r",
											"        method: \"PUT\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify(requestData)\r",
											"        }\r",
											"    }, pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"})\r",
											")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"content\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post content NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это изменнёный тайтл\",\n    \"content\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post name NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"content\": \"А тут мы сменили контент поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post title or content is number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ содержит ошибки при отправке чисел вместо строк\", function () {\r",
											"    const requestBody = {\r",
											"        \"name\": 231231,\r",
											"        \"content\": 1111\r",
											"    };\r",
											"    pm.request.body = JSON.stringify(requestBody);\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(422);\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"        \"name\": [\r",
											"            \"Not a valid string.\"\r",
											"        ],\r",
											"        \"content\": [\r",
											"            \"Not a valid string.\"\r",
											"        ]\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": 231231,\n    \"content\": 1111\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post only content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('content').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"А тут мы сменили контент поста\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post only name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('name').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это изменнёный тайтл2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post ----",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put post 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Отсутствует ресурс для изменения\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.text()).to.include(\"Post not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Это изменнёный тайтл2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/554543534",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"554543534"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получен статус 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ пустой\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "yourpassword",
											"type": "string"
										},
										{
											"key": "username",
											"value": "yourusername",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReDelete post Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/{{post_idv2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"{{post_idv2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post random ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "ruby",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/post/545345345",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"post",
										"545345345"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Post comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_idV2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"text\": json_req.text,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле text не NULL\", function(){\r",
											"    pm.expect(jsonData.text).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле text не пустое\", function(){    \r",
											"    pm.expect(jsonData.text).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle2\",\n    \"text\": \"yourcommenttex2t\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.text).to.eql(\"Необходимо добавить контент.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle2\",\n    \"text\": \"\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста с пустым названием\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql(\"Необходимо указать название комментария.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"text\": \"fgdfgdfg\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment empty title and content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.text).to.eql(\"Missing data for required field.\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql(\"Unknown field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"text\": \"\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.text).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post without title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без названия\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста с пустым названием\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Missing data for required field.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"yourcommenttex2t\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.text).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"text\": null,\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post NULL title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста c пустым значением\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании с пустым значением\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Field may not be null.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"text\": \"yourcommenttext\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment too large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); //Или string. Эта логика мне не до конца ясна... \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\");  \r",
											"    pm.expect(jsonData.text).to.eql([\"Longer than maximum length 80.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\n    \"text\": \"yourcommenttextyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddyourcommenttitledfgdfgdfgdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_idV2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"text\": json_req.text,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле text не NULL\", function(){\r",
											"    pm.expect(jsonData.text).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле text не пустое\", function(){    \r",
											"    pm.expect(jsonData.text).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"text\": \"yourcommenttext\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_idV2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"text\": json_req.text,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле text не NULL\", function(){\r",
											"    pm.expect(jsonData.text).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле text не пустое\", function(){    \r",
											"    pm.expect(jsonData.text).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"text\": \"yourcommenttext\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											" \r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"post_id4\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData.title).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.title).to.eql([\"Longer than maximum length 80.\"])\r",
											"});    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"text\": \"yourcommenttext\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 80 in text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_idV2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"text\": json_req.text,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле text не NULL\", function(){\r",
											"    pm.expect(jsonData.text).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле text не пустое\", function(){    \r",
											"    pm.expect(jsonData.text).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"text\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬ\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 81 in text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка на создание поста без контента\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка сообщения об ошибке при создании поста без контента\", function () {\r",
											"    pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData.text).to.be.a(\"array\"); \r",
											"    pm.expect(jsonData.text).to.eql([\"Longer than maximum length 80.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"text\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬЬЬ\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post length 79 in text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let json_req = JSON.parse(request.data);\r",
											"console.log(json_req);\r",
											"\r",
											"pm.environment.set(\"comment_idV2\", jsonData.id);\r",
											"\r",
											"console.log(jsonData);\r",
											"console.log(json_req);\r",
											"console.log(typeof(jsonData));\r",
											"console.log(typeof(json_req));\r",
											"\r",
											"pm.test(\"Ответ сервера в ожидаемом формате JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Есть тело ответа\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"\r",
											"pm.test(\"Статус код 2XX\", function() {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(json_req).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(json_req).to.have.property('post').that.is.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Значение title в response = значению title в request\", function() {\r",
											"    pm.expect(jsonData.title).to.eql(json_req.title);\r",
											"});\r",
											"\r",
											"pm.test(\"Значение content в response = значению content в request\", function() {\r",
											"    pm.expect(jsonData.content).to.eql(json_req.content);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка структуры данных\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Объект из запроса содержится в теле ответа\", function() {\r",
											"    const expectedObject = {\r",
											"        \"title\": json_req.title,\r",
											"        \"text\": json_req.text,\r",
											"        \"post\": json_req.post\r",
											"    };\r",
											"    pm.expect(jsonData).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле title не NULL\", function(){\r",
											"    pm.expect(jsonData.title).not.eql(null);\r",
											"});    \r",
											"pm.test(\"Поле title не пустое\", function(){    \r",
											"    pm.expect(jsonData.title).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле text не NULL\", function(){\r",
											"    pm.expect(jsonData.text).not.eql(null);\r",
											"});\r",
											"pm.test(\"Поле text не пустое\", function(){    \r",
											"    pm.expect(jsonData.text).not.eql(\"\");\r",
											"});\r",
											"pm.test(\"Поле id не NULL\", function(){\r",
											"    pm.expect(jsonData.id).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"}       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourcommenttitle\",\n    \"text\": \"Это название тестового поста. И оно будет длинным. ОООООООЧЧЧЧЧЧЕЕЕЕЕЕННННННЬЬЬ\",\n    \"post\": {{post_idv2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Сообщение о пустом значении\", function () {\r",
											"     pm.response.to.have.status(422);\r",
											"     pm.response.to.have.header(\"content-type\", \"application/json\");\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"_schema\");\r",
											"    pm.expect(jsonData._schema).to.be.a(\"array\");\r",
											"    pm.expect(jsonData._schema).to.eql([\"Invalid input type.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Json have property author, content, id, publication_datetime, titles\", function(){\r",
											"    jsonData.forEach(element => {\r",
											"        pm.expect(element).to.have.property(\"author\");\r",
											"        pm.expect(element).to.have.property(\"text\");\r",
											"        pm.expect(element).to.have.property(\"id\");\r",
											"        pm.expect(element).to.have.property(\"publication_datetime\");\r",
											"        pm.expect(element).to.have.property(\"title\");\r",
											"        });      \r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Это массив))\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ не больше 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"JSON has author, content, id, publication_datetime, titles properties\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"author\");\r",
											"    pm.expect(jsonData).to.have.property(\"text\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"publication_datetime\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"    pm.expect(jsonData).to.have.property(\"post\");\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not null\", function () {\r",
											"    pm.expect(jsonData.author).to.not.be.null;\r",
											"    pm.expect(jsonData.text).to.not.be.null;\r",
											"    pm.expect(jsonData.id).to.not.be.null;\r",
											"    pm.expect(jsonData.post).to.not.be.null;\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.null;\r",
											"    pm.expect(jsonData.title).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Values of properties are not empty\", function () {\r",
											"    pm.expect(jsonData.author + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.text).to.not.be.empty;\r",
											"    pm.expect(jsonData.id + \"\").to.not.eql(\"\");\r",
											"    pm.expect(jsonData.publication_datetime).to.not.be.empty;\r",
											"    pm.expect(jsonData.title).to.not.be.empty;\r",
											"    pm.expect(jsonData.post + \"\").to.not.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains POST data\", function() {\r",
											"    const expectedObject = {\r",
											"        \"post\": 3446,\r",
											"         \"title\": \"yourcommenttitle2\",\r",
											"        \"id\": 1628,\r",
											"        \"author\": 1111305,\r",
											"        \"text\": \"yourcommenttex2t\",\r",
											"        \"publication_datetime\": \"2023-02-19T15:33:31.226411\"\r",
											"    };\r",
											"    pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка типа данных в ответе\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ в JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(Object.keys(jsonData).length);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Json is not NULL\", function(){\r",
											"    pm.expect(jsonData).not.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/12685435345",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"12685435345"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получение пагинации постов - успешный ответ\", function () {\r",
											"    pm.sendRequest(\"https://hr.recruit.liis.su/qa0/v2/api/vitalyasroma@gmail.com/posts?page=1\", function (err, res) {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments?page=1",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments pagination limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments?page=1&limit=2",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments pagination page 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Проверка отсутствия второй страницы\", function () {\r",
											"    pm.sendRequest({\r",
											"        url: \"https://hr.recruit.liis.su/qa0/v2/api/vitalyasroma@gmail.com/posts?page=2\",\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        pm.expect(err).to.be.null;\r",
											"        pm.expect(res).to.have.status(200); //Хотя можно и 404\r",
											"        pm.expect('data' in res.json()).to.be.false;\r",
											"        pm.expect(res.json()).to.be.empty;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comments?page=2",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('text').that.is.a('string');\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Изменим тут\",\n    \"text\": \"И немного вот тут\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put comment non title or content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Некорректные данные в запросе\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.expect(pm.response.text()).to.include(\"Field may not be null.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"yourdsadsadsafname\",\n    \"text\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put title or content is number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ содержит ошибки при отправке чисел вместо строк\", function () {\r",
											"    const requestBody = {\r",
											"        \"title\": 231231,\r",
											"        \"content\": 1111\r",
											"    };\r",
											"    pm.request.body = JSON.stringify(requestBody);\r",
											"    \r",
											"    pm.expect(pm.response.code).to.eql(422);\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"        \"title\": [\r",
											"            \"Not a valid string.\"\r",
											"        ],\r",
											"        \"text\": [\r",
											"            \"Not a valid string.\"\r",
											"        ]\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 32323,\n    \"text\": 123232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put only content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('text').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"И всё\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put only title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Изменяемый ресурс существует и код 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.not.be.error;\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка наличия необходимых заголовков\", function () {\r",
											"    let headers = pm.response.headers;\r",
											"    let hasContentType = false;\r",
											"    let hasConnection = false;\r",
											"\r",
											"    headers.each(function (header) {\r",
											"        if (header.key === \"Content-Type\") {\r",
											"            hasContentType = true;\r",
											"        }\r",
											"        if (header.key === \"Connection\") {\r",
											"            hasConnection = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(hasContentType).to.be.true;\r",
											"    pm.expect(hasConnection).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Наличие обязательных полей в запросе\", function() {\r",
											"    const requiredFields = [\"message\", \"type\"];\r",
											"    const body = pm.response.json();\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(body).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Бади чек\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Типы данных полей\", function() {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw)).to.have.property('title').that.is.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"А сообщение забыл\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put -----",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put 404 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Отсутствует ресурс для изменения\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.text()).to.include(\"Comment not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										},
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Изменим тут\",\r\n    \"text\": \"И немного вот тут\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/1268432423423",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"1268432423423"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Получен статус 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ пустой\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re Delete comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/{{comment_idV2}}",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"{{comment_idV2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123B",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Vito234",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/comment/423432424234",
									"protocol": "https",
									"host": [
										"hr",
										"recruit",
										"liis",
										"su"
									],
									"path": [
										"qa0",
										"v2",
										"api",
										"{{email}}",
										"comment",
										"423432424234"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Grant user admin role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Креды не работают "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1111306\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://hr.recruit.liis.su/qa0/v2/api/{{email}}/make_admin",
							"protocol": "https",
							"host": [
								"hr",
								"recruit",
								"liis",
								"su"
							],
							"path": [
								"qa0",
								"v2",
								"api",
								"{{email}}",
								"make_admin"
							]
						},
						"description": "Grant user admin role so that he can put and delete foreign entities."
					},
					"response": []
				}
			]
		}
	]
}